/* DO NOT MODIFY:  This source is generated by the scripts in the
 * vi-firmware repository.
 *
 * Generated for v7.x of the OpenXC VI firmware.
 */

#include "diagnostics.h"
#include "can/canread.h"
#include "can/canwrite.h"
#include "signals.h"
#include "obd2.h"
#include "util/log.h"
#include "config.h"
#include "shared_handlers.h"

namespace can = openxc::can;

using openxc::util::log::debug;
using openxc::pipeline::Pipeline;
using openxc::config::getConfiguration;
using openxc::can::read::booleanDecoder;
using openxc::can::read::stateDecoder;
using openxc::can::read::ignoreDecoder;
using openxc::diagnostics::obd2::handleObd2Pid;
using namespace openxc::signals::handlers;

openxc_DynamicField handleWindshieldWiperStates(CanSignal* signal, CanSignal* signals,
        int signalCount, Pipeline* pipeline, float value, bool* send) {
    switch(int(value)) {
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
            return openxc::payload::wrapBoolean(true);
        default:
            return openxc::payload::wrapBoolean(false);
    }
}

const int MESSAGE_SET_COUNT = 1;
CanMessageSet MESSAGE_SETS[MESSAGE_SET_COUNT] = {
    { 0, "type-3", 2, 14, 27, 0 },
};

const int MAX_CAN_BUS_COUNT = 2;
CanBus CAN_BUSES[][MAX_CAN_BUS_COUNT] = {
    { // message set: type-3
        { speed: 500000,
        address: 1,
        maxMessageFrequency: 0,
        rawWritable: false,
        passthroughCanMessages: false,
        bypassFilters: false,
        loopback: false
        },

        { speed: 125000,
        address: 2,
        maxMessageFrequency: 0,
        rawWritable: false,
        passthroughCanMessages: false,
        bypassFilters: false,
        loopback: false
        },

    },
};

const int MAX_MESSAGE_COUNT = 14;
CanMessageDefinition CAN_MESSAGES[][MAX_MESSAGE_COUNT] = {
    { // message set: type-3
        { bus: &CAN_BUSES[0][0], id: 0x76, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // BrakeSnData_2_HS1
        { bus: &CAN_BUSES[0][0], id: 0x83, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // Steering_Data_HS1
        { bus: &CAN_BUSES[0][0], id: 0x165, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // EngBrakeData
        { bus: &CAN_BUSES[0][0], id: 0x167, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // VehicleOperatingModes
        { bus: &CAN_BUSES[0][0], id: 0x179, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // EngineData_7
        { bus: &CAN_BUSES[0][0], id: 0x202, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // EngVehicleSpThrottle2
        { bus: &CAN_BUSES[0][0], id: 0x204, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // EngVehicleSpThrottle
        { bus: &CAN_BUSES[0][0], id: 0x213, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // DesiredTorqBrk_HS1
        { bus: &CAN_BUSES[0][0], id: 0x230, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // TransGearData
        { bus: &CAN_BUSES[0][0], id: 0x3b3, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // BodyInfo_3
        { bus: &CAN_BUSES[0][0], id: 0x3c3, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // BCM_Lamp_Stat
        { bus: &CAN_BUSES[0][0], id: 0x430, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // Cluster_Info1_HS1
        { bus: &CAN_BUSES[0][0], id: 0x435, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // Cluster_Info4_HS1
        { bus: &CAN_BUSES[0][0], id: 0x465, format: STANDARD, frequencyClock: {0.000000}, forceSendChanged: true}, // GPS_Data_Nav_1_HS1
    },
};

const int MAX_SIGNAL_STATES = 12;
const int MAX_SIGNALS_WITH_STATES_COUNT = 5;
const CanSignalState SIGNAL_STATES[][MAX_SIGNALS_WITH_STATES_COUNT][MAX_SIGNAL_STATES] = {
    { // message set: type-3
        { {value: 1, name: "false"}, {value: 2, name: "true"}, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, },
        { {value: 1, name: "true"}, {value: 4, name: "false"}, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, },
        { {value: 0, name: "neutral"}, {value: 1, name: "first"}, {value: 2, name: "second"}, {value: 3, name: "third"}, {value: 4, name: "fourth"}, {value: 5, name: "fifth"}, {value: 6, name: "sixth"}, {value: 7, name: "seventh"}, {value: 8, name: "eighth"}, {value: 14, name: "reverse"}, { 0, NULL }, { 0, NULL }, },
        { {value: 1, name: "off"}, {value: 2, name: "accessory"}, {value: 4, name: "run"}, {value: 8, name: "start"}, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, },
        { {value: 0, name: "false"}, {value: 1, name: "true"}, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, { 0, NULL }, },
    },
};

const int MAX_SIGNAL_COUNT = 27;
CanSignal SIGNALS[][MAX_SIGNAL_COUNT] = {
    { // message set: type-3
        {message: &CAN_MESSAGES[0][0], genericName: "steering_wheel_angle", bitPosition: 1, bitSize: 15, factor: 0.100000, offset: -1600.000000, minValue: -1600.000000, maxValue: 1676.700000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // SteWhlComp_An_Est
        {message: &CAN_MESSAGES[0][1], genericName: "windshield_wiper_status", bitPosition: 4, bitSize: 4, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 15.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: true, states: NULL, stateCount: 0, writable: false, decoder: handleWindshieldWiperStates, encoder: NULL}, // WiprFront_D_Stat
        {message: &CAN_MESSAGES[0][2], genericName: "brake_pedal_status", bitPosition: 2, bitSize: 2, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 3.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: true, states: SIGNAL_STATES[0][0], stateCount: 2, writable: false, decoder: stateDecoder, encoder: NULL}, // BpedDrvAppl_D_Actl
        {message: &CAN_MESSAGES[0][3], genericName: "torque_at_transmission", bitPosition: 45, bitSize: 11, factor: 1.000000, offset: -500.000000, minValue: -500.000000, maxValue: 1547.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // TrnAin_Tq_Actl
        {message: &CAN_MESSAGES[0][4], genericName: "fuel_consumed_since_restart", bitPosition: 54, bitSize: 10, factor: 25.000000, offset: 0.000000, minValue: 0.000000, maxValue: 25575.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: handleFuelFlowMicroliters, encoder: NULL}, // FuelFlw_Vl_Dsply
        {message: &CAN_MESSAGES[0][4], genericName: "odometer", bitPosition: 40, bitSize: 8, factor: 0.200000, offset: 0.000000, minValue: 0.000000, maxValue: 50.800000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: handleRollingOdometerMeters, encoder: NULL}, // OdoCount
        {message: &CAN_MESSAGES[0][5], genericName: "vehicle_speed", bitPosition: 48, bitSize: 16, factor: 0.010000, offset: 0.000000, minValue: 0.000000, maxValue: 655.350000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // Veh_V_ActlEng
        {message: &CAN_MESSAGES[0][6], genericName: "accelerator_pedal_position", bitPosition: 6, bitSize: 10, factor: 0.100000, offset: 0.000000, minValue: 0.000000, maxValue: 102.300000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // ApedPos_Pc_ActlArb
        {message: &CAN_MESSAGES[0][6], genericName: "engine_speed", bitPosition: 27, bitSize: 13, factor: 2.000000, offset: 0.000000, minValue: 0.000000, maxValue: 16382.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // EngAout_N_Actl
        {message: &CAN_MESSAGES[0][7], genericName: "parking_brake_status", bitPosition: 29, bitSize: 3, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 7.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: SIGNAL_STATES[0][1], stateCount: 2, writable: false, decoder: stateDecoder, encoder: NULL}, // PrkBrkStatus
        {message: &CAN_MESSAGES[0][8], genericName: "transmission_gear_position", bitPosition: 0, bitSize: 4, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 15.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: true, states: SIGNAL_STATES[0][2], stateCount: 10, writable: false, decoder: stateDecoder, encoder: NULL}, // GearPos_D_Trg
        {message: &CAN_MESSAGES[0][9], genericName: "driver", bitPosition: 58, bitSize: 1, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 1.000000, frequencyClock: {0.500000}, sendSame: false, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: doorStatusDecoder, encoder: NULL}, // DrStatDrv_B_Actl
        {message: &CAN_MESSAGES[0][9], genericName: "ignition_status", bitPosition: 0, bitSize: 4, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 15.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: SIGNAL_STATES[0][3], stateCount: 4, writable: false, decoder: stateDecoder, encoder: NULL}, // Ignition_Status
        {message: &CAN_MESSAGES[0][9], genericName: "parking_brake_status", bitPosition: 48, bitSize: 1, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 1.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: SIGNAL_STATES[0][4], stateCount: 2, writable: false, decoder: stateDecoder, encoder: NULL}, // PrkBrkActv_B_Actl
        {message: &CAN_MESSAGES[0][9], genericName: "passenger", bitPosition: 59, bitSize: 1, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 1.000000, frequencyClock: {0.500000}, sendSame: false, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: doorStatusDecoder, encoder: NULL}, // DrStatPsngr_B_Actl
        {message: &CAN_MESSAGES[0][9], genericName: "rear_left", bitPosition: 55, bitSize: 1, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 1.000000, frequencyClock: {0.500000}, sendSame: false, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: doorStatusDecoder, encoder: NULL}, // DrStatRl_B_Actl
        {message: &CAN_MESSAGES[0][9], genericName: "rear_right", bitPosition: 54, bitSize: 1, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 1.000000, frequencyClock: {0.500000}, sendSame: false, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: doorStatusDecoder, encoder: NULL}, // DrStatRr_B_Actl
        {message: &CAN_MESSAGES[0][10], genericName: "headlamp_status", bitPosition: 3, bitSize: 1, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 1.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: true, states: NULL, stateCount: 0, writable: false, decoder: booleanDecoder, encoder: NULL}, // HeadLampLoActv_B_Stat
        {message: &CAN_MESSAGES[0][10], genericName: "high_beam_status", bitPosition: 6, bitSize: 1, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 1.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: true, states: NULL, stateCount: 0, writable: false, decoder: booleanDecoder, encoder: NULL}, // HeadLghtHiOn_B_Stat
        {message: &CAN_MESSAGES[0][11], genericName: "total_odometer", bitPosition: 8, bitSize: 24, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 16777214.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: ignoreDecoder, encoder: NULL}, // OdometerMasterValue
        {message: &CAN_MESSAGES[0][12], genericName: "fuel_level", bitPosition: 30, bitSize: 10, factor: 0.108696, offset: -5.217410, minValue: -5.217408, maxValue: 105.978600, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // FuelLvl_Pc_Dsply
        {message: &CAN_MESSAGES[0][13], genericName: "latitude_degrees1", bitPosition: 0, bitSize: 8, factor: 1.000000, offset: -89.000000, minValue: -89.000000, maxValue: 164.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // GPS_Latitude_Degrees
        {message: &CAN_MESSAGES[0][13], genericName: "latitude_minute_fraction1", bitPosition: 16, bitSize: 14, factor: 0.000100, offset: 0.000000, minValue: 0.000000, maxValue: 1.638100, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // GPS_Latitude_Min_dec
        {message: &CAN_MESSAGES[0][13], genericName: "latitude_minutes1", bitPosition: 8, bitSize: 6, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 61.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // GPS_Latitude_Minutes
        {message: &CAN_MESSAGES[0][13], genericName: "longitude_degrees1", bitPosition: 32, bitSize: 9, factor: 1.000000, offset: -179.000000, minValue: -179.000000, maxValue: 330.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // GPS_Longitude_Degrees
        {message: &CAN_MESSAGES[0][13], genericName: "longitude_minute_fraction1", bitPosition: 48, bitSize: 14, factor: 0.000100, offset: 0.000000, minValue: 0.000000, maxValue: 1.638100, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // GPS_Longitude_Min_dec
        {message: &CAN_MESSAGES[0][13], genericName: "longitude_minutes1", bitPosition: 41, bitSize: 6, factor: 1.000000, offset: 0.000000, minValue: 0.000000, maxValue: 61.000000, frequencyClock: {0.500000}, sendSame: true, forceSendChanged: false, states: NULL, stateCount: 0, writable: false, decoder: NULL, encoder: NULL}, // GPS_Longitude_Minutes
    },
};

void openxc::signals::initialize(openxc::diagnostics::DiagnosticsManager* diagnosticsManager) {
    switch(getConfiguration()->messageSetIndex) {
    case 0: // message set: type-3
        break;
    }
}

void openxc::signals::loop() {
    switch(getConfiguration()->messageSetIndex) {
    case 0: // message set: type-3
        break;
    }
}

const int MAX_COMMAND_COUNT = 0;
CanCommand COMMANDS[][MAX_COMMAND_COUNT] = {
};

void openxc::signals::decodeCanMessage(Pipeline* pipeline, CanBus* bus, CanMessage* message) {
    switch(getConfiguration()->messageSetIndex) {
    case 0: // message set: type-3
        switch(bus->address) {
        case 1:
            switch (message->id) {
            case 0x76: // BrakeSnData_2_HS1
                can::read::translateSignal(&SIGNALS[0][0], message, SIGNALS[0], getSignalCount(), pipeline); // SteWhlComp_An_Est
                break;
            case 0x83: // Steering_Data_HS1
                can::read::translateSignal(&SIGNALS[0][1], message, SIGNALS[0], getSignalCount(), pipeline); // WiprFront_D_Stat
                break;
            case 0x165: // EngBrakeData
                can::read::translateSignal(&SIGNALS[0][2], message, SIGNALS[0], getSignalCount(), pipeline); // BpedDrvAppl_D_Actl
                break;
            case 0x167: // VehicleOperatingModes
                can::read::translateSignal(&SIGNALS[0][3], message, SIGNALS[0], getSignalCount(), pipeline); // TrnAin_Tq_Actl
                break;
            case 0x179: // EngineData_7
                can::read::translateSignal(&SIGNALS[0][4], message, SIGNALS[0], getSignalCount(), pipeline); // FuelFlw_Vl_Dsply
                can::read::translateSignal(&SIGNALS[0][5], message, SIGNALS[0], getSignalCount(), pipeline); // OdoCount
                break;
            case 0x202: // EngVehicleSpThrottle2
                can::read::translateSignal(&SIGNALS[0][6], message, SIGNALS[0], getSignalCount(), pipeline); // Veh_V_ActlEng
                break;
            case 0x204: // EngVehicleSpThrottle
                can::read::translateSignal(&SIGNALS[0][7], message, SIGNALS[0], getSignalCount(), pipeline); // ApedPos_Pc_ActlArb
                can::read::translateSignal(&SIGNALS[0][8], message, SIGNALS[0], getSignalCount(), pipeline); // EngAout_N_Actl
                break;
            case 0x213: // DesiredTorqBrk_HS1
                can::read::translateSignal(&SIGNALS[0][9], message, SIGNALS[0], getSignalCount(), pipeline); // PrkBrkStatus
                break;
            case 0x230: // TransGearData
                can::read::translateSignal(&SIGNALS[0][10], message, SIGNALS[0], getSignalCount(), pipeline); // GearPos_D_Trg
                break;
            case 0x3b3: // BodyInfo_3
                can::read::translateSignal(&SIGNALS[0][11], message, SIGNALS[0], getSignalCount(), pipeline); // DrStatDrv_B_Actl
                can::read::translateSignal(&SIGNALS[0][12], message, SIGNALS[0], getSignalCount(), pipeline); // Ignition_Status
                can::read::translateSignal(&SIGNALS[0][13], message, SIGNALS[0], getSignalCount(), pipeline); // PrkBrkActv_B_Actl
                can::read::translateSignal(&SIGNALS[0][14], message, SIGNALS[0], getSignalCount(), pipeline); // DrStatPsngr_B_Actl
                can::read::translateSignal(&SIGNALS[0][15], message, SIGNALS[0], getSignalCount(), pipeline); // DrStatRl_B_Actl
                can::read::translateSignal(&SIGNALS[0][16], message, SIGNALS[0], getSignalCount(), pipeline); // DrStatRr_B_Actl
                break;
            case 0x3c3: // BCM_Lamp_Stat
                can::read::translateSignal(&SIGNALS[0][17], message, SIGNALS[0], getSignalCount(), pipeline); // HeadLampLoActv_B_Stat
                can::read::translateSignal(&SIGNALS[0][18], message, SIGNALS[0], getSignalCount(), pipeline); // HeadLghtHiOn_B_Stat
                break;
            case 0x430: // Cluster_Info1_HS1
                can::read::translateSignal(&SIGNALS[0][19], message, SIGNALS[0], getSignalCount(), pipeline); // OdometerMasterValue
                break;
            case 0x435: // Cluster_Info4_HS1
                can::read::translateSignal(&SIGNALS[0][20], message, SIGNALS[0], getSignalCount(), pipeline); // FuelLvl_Pc_Dsply
                break;
            case 0x465: // GPS_Data_Nav_1_HS1
                can::read::translateSignal(&SIGNALS[0][21], message, SIGNALS[0], getSignalCount(), pipeline); // GPS_Latitude_Degrees
                can::read::translateSignal(&SIGNALS[0][22], message, SIGNALS[0], getSignalCount(), pipeline); // GPS_Latitude_Min_dec
                can::read::translateSignal(&SIGNALS[0][23], message, SIGNALS[0], getSignalCount(), pipeline); // GPS_Latitude_Minutes
                can::read::translateSignal(&SIGNALS[0][24], message, SIGNALS[0], getSignalCount(), pipeline); // GPS_Longitude_Degrees
                can::read::translateSignal(&SIGNALS[0][25], message, SIGNALS[0], getSignalCount(), pipeline); // GPS_Longitude_Min_dec
                can::read::translateSignal(&SIGNALS[0][26], message, SIGNALS[0], getSignalCount(), pipeline); // GPS_Longitude_Minutes
                break;
            }
            break;
        case 2:
            switch (message->id) {
            }
            break;
        }
        break;
    }
}


CanCommand* openxc::signals::getCommands() {
    return COMMANDS[getActiveMessageSet()->index];
}

int openxc::signals::getCommandCount() {
    return getActiveMessageSet()->commandCount;
}

CanMessageDefinition* openxc::signals::getMessages() {
    return CAN_MESSAGES[getActiveMessageSet()->index];
}

int openxc::signals::getMessageCount() {
    return getActiveMessageSet()->messageCount;
}

CanSignal* openxc::signals::getSignals() {
    return SIGNALS[getActiveMessageSet()->index];
}

int openxc::signals::getSignalCount() {
    return getActiveMessageSet()->signalCount;
}

CanBus* openxc::signals::getCanBuses() {
    return CAN_BUSES[getActiveMessageSet()->index];
}

int openxc::signals::getCanBusCount() {
    return getActiveMessageSet()->busCount;
}

CanMessageSet* openxc::signals::getActiveMessageSet() {
    return &MESSAGE_SETS[getConfiguration()->messageSetIndex];
}

CanMessageSet* openxc::signals::getMessageSets() {
    return MESSAGE_SETS;
}

int openxc::signals::getMessageSetCount() {
    return MESSAGE_SET_COUNT;
}

